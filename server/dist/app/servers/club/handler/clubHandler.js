"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClubHandler = void 0;
const dbManager_1 = require("../../../repositories/dbManager");
const dispatcher_1 = require("../../../util/dispatcher");
const response_1 = require("../../../util/response");
const hallService_1 = require("../../hall/service/hallService");
function default_1(app) {
    return new ClubHandler(app);
}
exports.default = default_1;
class ClubHandler {
    constructor(app) {
        this.app = app;
        this.channelService = null;
        this.channelService = this.app.get('channelService');
    }
    async enter(msg, session) {
        let clubKey = parseInt(session.get('clubKey'));
        let userID = parseInt(session.uid);
        let clubInfo = await dbManager_1.DBManager.get().clubDB.getClubInfoByKey(clubKey);
        let userInfo = await dbManager_1.DBManager.get().clubDB.getClubUserInfo(clubKey, userID);
        let required = await dbManager_1.DBManager.get().clubDB.getRequiredMembers(clubKey);
        let roomInfo = await dbManager_1.DBManager.get().clubDB.getClubRoom(clubKey);
        if (!userInfo) {
            return response_1.Response.ERROR('您你已经不在此俱乐部中!');
        }
        for (let info of roomInfo) {
            let ret = await this.app.rpc.game.gameRemote.getSitUser.toServer((info.ServerID), (info.RoomID));
            info.users = ret ? ret : [];
        }
        return response_1.Response.OK({
            clubInfo: clubInfo,
            userInfo: userInfo,
            roomInfo: roomInfo,
            required: userInfo.MemberOrder != 0 ? required : []
        });
    }
    async getClubRequire(msg, session) {
        let clubKey = parseInt(session.get('clubKey'));
        let require = await dbManager_1.DBManager.get().clubDB.getRequiredMembers(clubKey);
        return require;
    }
    async doRequire(msg, session) {
        let clubKey = parseInt(session.get('clubKey'));
        let userID = parseInt(session.uid);
        let clubUser = await dbManager_1.DBManager.get().clubDB.getClubUserInfo(clubKey, userID);
        if (clubUser.MemberOrder == 0) {
            return response_1.Response.ERROR('您没有权限操作');
        }
        let state = msg.isAgree ? 1 : 2;
        let requireUsers = await dbManager_1.DBManager.get().clubDB.getRequiredMembers(clubKey);
        // 校验人数上限
        if (state) {
            let config = await dbManager_1.DBManager.get().systemDB.getConfig('ClubMaxUser');
            let maxCnt = -1;
            if (config && config.ConfigValue != '-1') {
                maxCnt = parseInt(config.ConfigValue);
            }
            if (maxCnt != -1) {
                let members = await dbManager_1.DBManager.get().clubDB.getClubMembers(clubKey);
                if (msg.userID == 0 && members.length + requireUsers.length > maxCnt) {
                    return response_1.Response.ERROR('俱乐部成员数量将超过最大上限, 请逐一添加成员');
                }
                if (msg.userID != 0 && members.length + 1 > maxCnt) {
                    return response_1.Response.ERROR('俱乐部成员数量超过最大上限');
                }
            }
        }
        if (msg.userID == 0) {
            await dbManager_1.DBManager.get().clubDB.updateAllJoinStatus(clubKey, state);
        }
        else {
            await dbManager_1.DBManager.get().clubDB.updateJoinStatus(msg.userID, clubKey, state);
        }
        if (msg.isAgree) {
            let info = await dbManager_1.DBManager.get().clubDB.getClubInfoByKey(clubKey);
            let channel = this.channelService.getChannel(clubKey + '', false);
            channel.pushMessage('onUpdateUser', { clubKey: clubKey, userCnt: info.MemberCount });
            // 更新用界面
            let fn = async (userID) => {
                await this.app.rpc.hall.hallRemote.addClub.toServer(dispatcher_1.dispatch(userID + '', this.app.getServersByType('hall')).id, userID, clubKey);
            };
            if (msg.userID == 0 && requireUsers != null) {
                requireUsers.forEach((info) => {
                    if (info.JoinStatus == 0) {
                        fn(info.UserID);
                    }
                });
            }
            else {
                fn(msg.userID);
            }
        }
        let require = await dbManager_1.DBManager.get().clubDB.getRequiredMembers(clubKey);
        return response_1.Response.OK(require);
    }
    async getClubMember(msg, session) {
        let clubKey = parseInt(session.get('clubKey'));
        return await dbManager_1.DBManager.get().clubDB.getClubMembers(clubKey);
    }
    async dissClubRoom(msg, session) {
        let roomInfo = await dbManager_1.DBManager.get().gameDB.getRoomInfo(msg.roomID);
        let userID = parseInt(session.uid);
        let clubKey = parseInt(session.get('clubKey'));
        let userInfo = await dbManager_1.DBManager.get().clubDB.getClubUserInfo(clubKey, userID);
        if (userInfo.MemberOrder == 0) {
            return response_1.Response.ERROR('您没有权限做此操作!');
        }
        if (!msg.force && roomInfo.Process > 0) {
            return response_1.Response.ERROR('游戏已经开始,无法解散房间');
        }
        await this.app.rpc.game.gameRemote.dissRoom.toServer(roomInfo.ServerID, msg.roomID, msg.force);
        return response_1.Response.OK('解散成功!');
    }
    async kickUser(msg, session) {
        let userID = parseInt(session.uid);
        let clubKey = parseInt(session.get('clubKey'));
        if (msg.userID == userID) {
            return response_1.Response.ERROR('您不能将自己踢出!');
        }
        let userInfo = await dbManager_1.DBManager.get().clubDB.getClubUserInfo(clubKey, userID);
        if (userInfo.MemberOrder == 0) {
            return response_1.Response.ERROR('您没有权限做此操作!');
        }
        let kickUser = await dbManager_1.DBManager.get().clubDB.getClubUserInfo(clubKey, msg.userID);
        if (!kickUser) {
            return response_1.Response.ERROR('无此玩家!');
        }
        if (kickUser.MemberOrder == 2) {
            return response_1.Response.ERROR('您没有权限做此操作!');
        }
        await dbManager_1.DBManager.get().clubDB.deleteClubMember(clubKey, msg.userID);
        let users = await dbManager_1.DBManager.get().clubDB.getClubMembers(clubKey);
        let channel = this.channelService.getChannel(clubKey + '', false);
        channel.pushMessage('onUpdateUser', { clubKey: clubKey, userCnt: users.length });
        this.channelService.pushMessageByUids('onLeaveClub', { clubKey: clubKey }, [channel.getMember(msg.userID + '')]);
        return response_1.Response.OK(users);
    }
    async addScore(msg, session) {
        let userID = parseInt(session.uid);
        let clubKey = parseInt(session.get('clubKey'));
        let userInfo = await dbManager_1.DBManager.get().clubDB.getClubUserInfo(clubKey, userID);
        if (!userInfo) {
            return response_1.Response.ERROR('您你已经不在此俱乐部中!');
        }
        let tagUser = await dbManager_1.DBManager.get().clubDB.getClubUserInfo(clubKey, msg.userID);
        if (!tagUser) {
            return response_1.Response.ERROR('该用户已经离开俱乐部');
        }
        if (userInfo.MemberOrder == 0) {
            return response_1.Response.ERROR('您没有权限做此操作!');
        }
        // if (userInfo.MemberOrder != 2 && userInfo.Score < msg.score) {
        //     return Response.ERROR('您的积分不足!');
        // }
        if (msg.score == 0) {
            msg.score = -tagUser.Score;
        }
        await dbManager_1.DBManager.get().clubDB.addScoreLog(clubKey, userID, userInfo.Score, msg.userID, tagUser.Score, msg.score);
        await dbManager_1.DBManager.get().clubDB.addScore(clubKey, msg.userID, msg.score);
        // if (userInfo.MemberOrder != 2 || (msg.score < 0 && userID != tagUser.UserID)) {
        //     await DBManager.get().clubDB.addScore(clubKey, userID, -msg.score);
        // }
        userInfo = await dbManager_1.DBManager.get().clubDB.getClubUserInfo(clubKey, userID);
        tagUser = await dbManager_1.DBManager.get().clubDB.getClubUserInfo(clubKey, msg.userID);
        let channel = this.channelService.getChannel(clubKey + '', false);
        let info = channel.getMember(msg.userID + '');
        if (!!info) {
            this.channelService.pushMessageByUids('updateUserInfo', tagUser, [info]);
        }
        return response_1.Response.OK({
            userInfo: userInfo,
            tagUser: tagUser,
        });
    }
    async getScoreLog(msg, session) {
        let clubKey = parseInt(session.get('clubKey'));
        let info = await dbManager_1.DBManager.get().clubDB.getScoreLog(clubKey);
        info.forEach((row) => {
            row.CreateTime = row.CreateTime.fmt('yyyy-MM-dd hh:mm:ss');
        });
        return info;
    }
    async dissOrExitClub(msg, session) {
        let userID = parseInt(session.uid);
        let clubKey = parseInt(session.get('clubKey'));
        let userInfo = await dbManager_1.DBManager.get().clubDB.getClubUserInfo(clubKey, userID);
        let channel = this.channelService.getChannel(clubKey + '', false);
        if (userInfo.MemberOrder == 2) {
            // 解散
            let roomInfo = await dbManager_1.DBManager.get().clubDB.getClubRoom(clubKey);
            for (let room of roomInfo) {
                await this.dissClubRoom({
                    roomID: room.RoomID,
                    force: true,
                }, session);
            }
            await dbManager_1.DBManager.get().clubDB.deleteClub(clubKey);
            channel.pushMessage('onLeaveClub', { clubKey: clubKey });
            channel.destroy();
        }
        else {
            // 退出
            await dbManager_1.DBManager.get().clubDB.exitClub(clubKey, userID);
            let info = await dbManager_1.DBManager.get().clubDB.getClubInfoByKey(clubKey);
            channel.pushMessage('onUpdateUser', { clubKey: clubKey, userCnt: info.MemberCount });
            this.channelService.pushMessageByUids('onLeaveClub', { clubKey: clubKey }, [channel.getMember(userID + '')]);
        }
        return response_1.Response.OK('操作成功');
    }
    async setUserManager(msg, session) {
        let userID = parseInt(session.uid);
        let clubKey = parseInt(session.get('clubKey'));
        let userInfo = await dbManager_1.DBManager.get().clubDB.getClubUserInfo(clubKey, userID);
        if (userInfo.MemberOrder != 2) {
            return response_1.Response.ERROR('权限不足');
        }
        if (msg.isGameID) {
            let user = await dbManager_1.DBManager.get().accountDB.getAccountsInfoByGameID(msg.userID);
            if (!user) {
                return response_1.Response.ERROR('用户不存在');
            }
            msg.userID = user.UserID;
        }
        if (msg.state) {
            let config = await dbManager_1.DBManager.get().systemDB.getConfig('MaxManagerCnt');
            if (config && config.ConfigValue != '-1') {
                let members = await dbManager_1.DBManager.get().clubDB.getClubMembers(clubKey);
                let managerCnt = 0;
                for (let user of members) {
                    if (user.MemberOrder == 1)
                        managerCnt++;
                    if (managerCnt >= parseInt(config.ConfigValue)) {
                        return response_1.Response.ERROR('管理员数量超过上限');
                    }
                }
            }
        }
        let tarUser = await dbManager_1.DBManager.get().clubDB.getClubUserInfo(clubKey, msg.userID);
        if (!tarUser) {
            return response_1.Response.ERROR('用户不存在');
        }
        if (tarUser.MemberOrder == 2) {
            return response_1.Response.ERROR('您不能设置部长');
        }
        if (msg.state && tarUser.MemberOrder == 1) {
            return response_1.Response.ERROR('该用户已经是管理员, 无需重新设置');
        }
        await dbManager_1.DBManager.get().clubDB.updateUserOrder(clubKey, msg.userID, msg.state ? 1 : 0);
        let target = await dbManager_1.DBManager.get().clubDB.getClubUserInfo(clubKey, msg.userID);
        let channel = this.channelService.getChannel(clubKey + '', false);
        this.channelService.pushMessageByUids('onUpdateManager', { clubKey: clubKey, userInfo: target }, [channel.getMember(msg.userID + '')]);
        return response_1.Response.OK(await dbManager_1.DBManager.get().clubDB.getClubMembers(clubKey));
    }
    async getClubRecords(msg, session) {
        let userID = parseInt(session.uid);
        let clubKey = parseInt(session.get('clubKey'));
        let userInfo = await dbManager_1.DBManager.get().clubDB.getClubUserInfo(clubKey, userID);
        let ret = [];
        if (userInfo.MemberOrder > 0) {
            ret = await dbManager_1.DBManager.get().clubDB.getClubDrawInfo(clubKey);
        }
        else {
            ret = await dbManager_1.DBManager.get().clubDB.getClubUserDrawInfo(clubKey, userID);
        }
        return hallService_1.HallService.getGameRecord(ret);
    }
    async leave(msg, session) {
        let clubKey = parseInt(session.get('clubKey'));
        if (clubKey) {
            let channel = this.app.get('channelService').getChannel(clubKey + '', false);
            let user = channel.getMember(session.uid);
            if (!!channel && !!user) {
                channel.leave(user.uid, user.sid);
            }
        }
    }
}
exports.ClubHandler = ClubHandler;
//# sourceMappingURL=data:application/json;base64,