"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function composeRequest(id, moduleId, body) {
    if (id) {
        // request message
        return JSON.stringify({
            reqId: id,
            moduleId: moduleId,
            body: body
        });
    }
    else {
        // notify message
        return {
            moduleId: moduleId,
            body: body
        };
    }
}
exports.composeRequest = composeRequest;
function composeResponse(req, err, res) {
    if (req.reqId) {
        // request only
        return JSON.stringify({
            respId: req.reqId,
            error: cloneError(err),
            body: res
        });
    }
    // invalid message(notify dose not need response)
    return null;
}
exports.composeResponse = composeResponse;
function composeCommand(id, command, moduleId, body) {
    if (id) {
        // command message
        return JSON.stringify({
            reqId: id,
            command: command,
            moduleId: moduleId,
            body: body
        });
    }
    else {
        return JSON.stringify({
            command: command,
            moduleId: moduleId,
            body: body
        });
    }
}
exports.composeCommand = composeCommand;
function parse(msg) {
    if (typeof msg === 'string') {
        return JSON.parse(msg);
    }
    return msg;
}
exports.parse = parse;
function isRequest(msg) {
    return (msg && msg.reqId);
}
exports.isRequest = isRequest;
let cloneError = function (origin) {
    // copy the stack infos for Error instance json result is empty
    if (!(origin instanceof Error)) {
        return origin;
    }
    let res = {
        message: origin.message,
        stack: origin.stack
    };
    return res;
};
var PRO_CODE;
(function (PRO_CODE) {
    PRO_CODE[PRO_CODE["OK"] = 1] = "OK";
    PRO_CODE[PRO_CODE["FAIL"] = -1] = "FAIL";
})(PRO_CODE = exports.PRO_CODE || (exports.PRO_CODE = {}));
exports.PRO_OK = PRO_CODE.OK;
exports.PRO_FAIL = PRO_CODE.FAIL;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvdG9jb2wuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvdXRpbC9wcm90b2NvbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLFNBQWdCLGNBQWMsQ0FBQyxFQUFVLEVBQUUsUUFBZ0IsRUFBRSxJQUFTO0lBQ2xFLElBQUksRUFBRSxFQUFFO1FBQ0osa0JBQWtCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNsQixLQUFLLEVBQUUsRUFBRTtZQUNULFFBQVEsRUFBRSxRQUFRO1lBQ2xCLElBQUksRUFBRSxJQUFJO1NBQ2IsQ0FBQyxDQUFDO0tBQ047U0FBTTtRQUNILGlCQUFpQjtRQUNqQixPQUFPO1lBQ0gsUUFBUSxFQUFFLFFBQVE7WUFDbEIsSUFBSSxFQUFFLElBQUk7U0FDYixDQUFDO0tBQ0w7QUFDTCxDQUFDO0FBZkQsd0NBZUM7QUFFRCxTQUFnQixlQUFlLENBQUUsR0FBb0IsRUFBRSxHQUFtQixFQUFFLEdBQVE7SUFDaEYsSUFBSSxHQUFHLENBQUMsS0FBSyxFQUFFO1FBQ1gsZUFBZTtRQUNmLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztZQUNsQixNQUFNLEVBQUUsR0FBRyxDQUFDLEtBQUs7WUFDakIsS0FBSyxFQUFFLFVBQVUsQ0FBQyxHQUFHLENBQUM7WUFDdEIsSUFBSSxFQUFFLEdBQUc7U0FDWixDQUFDLENBQUM7S0FDTjtJQUNELGlEQUFpRDtJQUNqRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBWEQsMENBV0M7QUFFRCxTQUFnQixjQUFjLENBQUMsRUFBVSxFQUFFLE9BQWUsRUFBRSxRQUFnQixFQUFFLElBQVM7SUFDbkYsSUFBSSxFQUFFLEVBQUU7UUFDSixrQkFBa0I7UUFDbEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2xCLEtBQUssRUFBRSxFQUFFO1lBQ1QsT0FBTyxFQUFFLE9BQU87WUFDaEIsUUFBUSxFQUFFLFFBQVE7WUFDbEIsSUFBSSxFQUFFLElBQUk7U0FDYixDQUFDLENBQUM7S0FDTjtTQUFNO1FBQ0gsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQ2xCLE9BQU8sRUFBRSxPQUFPO1lBQ2hCLFFBQVEsRUFBRSxRQUFRO1lBQ2xCLElBQUksRUFBRSxJQUFJO1NBQ2IsQ0FBQyxDQUFDO0tBQ047QUFDTCxDQUFDO0FBaEJELHdDQWdCQztBQUVELFNBQWdCLEtBQUssQ0FBQyxHQUFRO0lBQzFCLElBQUksT0FBTyxHQUFHLEtBQUssUUFBUSxFQUFFO1FBQ3pCLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQztLQUMxQjtJQUNELE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQztBQUxELHNCQUtDO0FBRUQsU0FBZ0IsU0FBUyxDQUFDLEdBQVE7SUFDOUIsT0FBTyxDQUFDLEdBQUcsSUFBSSxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDOUIsQ0FBQztBQUZELDhCQUVDO0FBRUQsSUFBSSxVQUFVLEdBQUcsVUFBVSxNQUFXO0lBQ2xDLCtEQUErRDtJQUMvRCxJQUFJLENBQUMsQ0FBQyxNQUFNLFlBQVksS0FBSyxDQUFDLEVBQUU7UUFDNUIsT0FBTyxNQUFNLENBQUM7S0FDakI7SUFDRCxJQUFJLEdBQUcsR0FBRztRQUNOLE9BQU8sRUFBRSxNQUFNLENBQUMsT0FBTztRQUN2QixLQUFLLEVBQUUsTUFBTSxDQUFDLEtBQUs7S0FDdEIsQ0FBQztJQUNGLE9BQU8sR0FBRyxDQUFDO0FBQ2YsQ0FBQyxDQUFDO0FBRUYsSUFBWSxRQUdYO0FBSEQsV0FBWSxRQUFRO0lBQ2hCLG1DQUFNLENBQUE7SUFDTix3Q0FBUyxDQUFBO0FBQ2IsQ0FBQyxFQUhXLFFBQVEsR0FBUixnQkFBUSxLQUFSLGdCQUFRLFFBR25CO0FBRVUsUUFBQSxNQUFNLEdBQUcsUUFBUSxDQUFDLEVBQUUsQ0FBQztBQUNyQixRQUFBLFFBQVEsR0FBRyxRQUFRLENBQUMsSUFBSSxDQUFDIn0=