"use strict";
/**
 * Loader Module
 */
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs");
const path = require("path");
const container_1 = require("./container");
const decoraters_1 = require("./decoraters");
/**
 * Load modules under the path.
 * If the module is a function, loader would treat it as a factory function
 * and invoke it with the context parameter to get a instance of the module.
 * Else loader would just require the module.
 * Module instance can specify a name property and it would use file name as
 * the default name if there is no name property. All loaded modules under the
 * path would be add to an empty root object with the name as the key.
 *
 * @param   {String} mpath    the path of modules. Load all the files under the
 *                           path, but *not* recursively if the path contain
 *                           any sub-directory.
 * @param  {Object} context  the context parameter that would be pass to the
 *                           module factory function.
 * @return {Object}          module that has loaded.
 */
function load(mpath, context, reload, createInstance, pathType) {
    if (!mpath) {
        throw new Error('opts or opts.path should not be empty.');
    }
    try {
        mpath = fs.realpathSync(mpath);
    }
    catch (err) {
        throw err;
    }
    if (!isDir(mpath)) {
        throw new Error('path should be directory.');
    }
    return loadPath(mpath, context, reload, createInstance, pathType);
}
exports.load = load;
function loadFile(fp, reload) {
    let m = reload ? requireUncached(fp) : require(fp);
    return m;
}
exports.loadFile = loadFile;
function loadPath(path, context, reload, createInstance, pathType) {
    let files = fs.readdirSync(path);
    if (files.length === 0) {
        console.warn('path is empty, path:' + path);
        return;
    }
    if (path.charAt(path.length - 1) !== '/') {
        path += '/';
    }
    let fp, fn, m, res = {};
    for (let i = 0, l = files.length; i < l; i++) {
        fn = files[i];
        fp = path + fn;
        if (!isFile(fp)) {
            // only load  file
            continue;
        }
        if (!checkFileType(fn, '.js') && !checkFileType(fn, '.ts')) {
            // only load js/ts file type
            continue;
        }
        m = loadFile(fp, reload);
        if (!m) {
            continue;
        }
        // 兼容旧的写法
        if (typeof m.default === 'function') {
            let instance = m.default(context);
            let name = instance.name || getFileName(fn, '.js'.length);
            res[name] = instance;
        }
        for (let key in m) {
            let cls = m[key];
            if (decoraters_1.isDefined(cls, pathType)) {
                if (createInstance) {
                    res[cls.name] = container_1.getFromContainer(cls);
                }
                else {
                    res[cls.name] = cls;
                }
            }
        }
    }
    return res;
}
exports.loadPath = loadPath;
/**
 * Check file suffix

 * @param fn {String} file name
 * @param suffix {String} suffix string, such as .js, etc.
 */
function checkFileType(fn, suffix) {
    if (suffix.charAt(0) !== '.') {
        suffix = '.' + suffix;
    }
    if (fn.length <= suffix.length) {
        return false;
    }
    let str = fn.substring(fn.length - suffix.length).toLowerCase();
    suffix = suffix.toLowerCase();
    return str === suffix;
}
exports.checkFileType = checkFileType;
let isFile = function (path) {
    return fs.statSync(path).isFile();
};
let isDir = function (path) {
    return fs.statSync(path).isDirectory();
};
let getFileName = function (fp, suffixLength) {
    let fn = path.basename(fp);
    if (fn.length > suffixLength) {
        return fn.substring(0, fn.length - suffixLength);
    }
    return fn;
};
const clearRequireCache = function (path) {
    const moduleObj = require.cache[path];
    if (!moduleObj) {
        return;
    }
    if (moduleObj.parent) {
        //    console.log('has parent ',moduleObj.parent);
        moduleObj.parent.children.splice(moduleObj.parent.children.indexOf(moduleObj), 1);
    }
    delete require.cache[path];
};
let requireUncached = function (module) {
    if (container_1.isUseContainer()) {
        let m = require.cache[require.resolve(module)];
        if (m) {
            if (typeof m.default === 'function') {
                container_1.removeFromContainer(m.default);
            }
        }
    }
    clearRequireCache(require.resolve(module));
    return require(module);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9hZGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vbGliL2xvYWRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7O0dBRUc7O0FBRUgseUJBQXlCO0FBQ3pCLDZCQUE2QjtBQUM3QiwyQ0FBa0Y7QUFDbEYsNkNBQXVEO0FBRXZEOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILFNBQWdCLElBQUksQ0FBQyxLQUFhLEVBQUUsT0FBWSxFQUFFLE1BQWUsRUFBRSxjQUF1QixFQUFFLFFBQXdCO0lBQ2hILElBQUksQ0FBQyxLQUFLLEVBQUU7UUFDUixNQUFNLElBQUksS0FBSyxDQUFDLHdDQUF3QyxDQUFDLENBQUM7S0FDN0Q7SUFFRCxJQUFJO1FBQ0EsS0FBSyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDbEM7SUFBQyxPQUFPLEdBQUcsRUFBRTtRQUNWLE1BQU0sR0FBRyxDQUFDO0tBQ2I7SUFFRCxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ2YsTUFBTSxJQUFJLEtBQUssQ0FBQywyQkFBMkIsQ0FBQyxDQUFDO0tBQ2hEO0lBRUQsT0FBTyxRQUFRLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsY0FBYyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0FBQ3RFLENBQUM7QUFoQkQsb0JBZ0JDO0FBRUQsU0FBZ0IsUUFBUSxDQUFDLEVBQVUsRUFBRSxNQUFlO0lBQ2hELElBQUksQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDbkQsT0FBTyxDQUFDLENBQUM7QUFDYixDQUFDO0FBSEQsNEJBR0M7QUFFRCxTQUFnQixRQUFRLENBQUMsSUFBWSxFQUFFLE9BQVksRUFBRSxNQUFlLEVBQUUsY0FBdUIsRUFBRSxRQUF3QjtJQUNuSCxJQUFJLEtBQUssR0FB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